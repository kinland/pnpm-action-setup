name: Test Action

on:
  - push
  - pull_request
  - workflow_dispatch

jobs:
  test_default_inputs:
    name: Test with default inputs

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        pnpm:
          - 4.11.1
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Run the action
        uses: ./
        with:
          version: ${{ matrix.pnpm }}

      - name: 'Test: which'
        run: which pnpm; which pnpx

      - name: 'Test: install'
        run: pnpm install

  test_dest:
    name: Test with dest

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        pnpm:
          - 4.11.1
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Run the action
        uses: ./
        with:
          version: ${{ matrix.pnpm }}
          dest: ~/test/pnpm

      - name: 'Test: which'
        run: which pnpm && which pnpx

      - name: 'Test: install'
        run: pnpm install

  test_standalone:
    name: Test with standalone

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest

        standalone:
          - true
          - false

    steps:
      - uses: actions/checkout@v4

      - name: Run the action
        uses: ./
        with:
          version: 7.0.0
          standalone: ${{ matrix.standalone }}

      - name: install Node.js
        uses: actions/setup-node@v3
        with:
          # pnpm@7.0.0 is not compatible with Node.js 12
          node-version: 12.22.12

      - name: 'Test: which (pnpm)'
        run: which pnpm

      - name: 'Test: which (pnpx)'
        if: matrix.standalone == false
        run: which pnpx

      - name: 'Test: install when standalone is true'
        if: matrix.standalone
        run: pnpm install

      - name: 'Test: install when standalone is false'
        if: matrix.standalone == false
        # Since the default shell on windows runner is pwsh, we specify bash explicitly
        shell: bash
        run: |
          if pnpm install; then
            echo "pnpm install should fail"
            exit 1
          else
            echo "pnpm install failed as expected"
          fi

  test_run_install:
    name: 'Test with run_install (${{ matrix.run_install.name }}, ${{ matrix.os }})'

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        pnpm:
          - 4.11.1
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        run_install:
          - name: 'null'
            value: 'null'
          - name: 'empty object'
            value: '{}'
          - name: 'recursive'
            value: |
              recursive: true
          - name: 'global'
            value: |
              args:
                - --global
                - --global-dir=./pnpm-global
                - npm
                - yarn
                - pnpm
          - name: 'array'
            value: |
              - {}
              - recursive: true
              - args:
                - --global
                - --global-dir=./pnpm-global
                - npm
                - yarn
                - pnpm

    steps:
      - uses: actions/checkout@v4

      - name: Run the action
        uses: ./
        with:
          version: ${{ matrix.pnpm }}
          run_install: ${{ matrix.run_install.value }}

      - name: 'Test: which'
        run: which pnpm; which pnpx

      - name: 'Test: install'
        run: pnpm install

  test_run_cached_install:
    name: 'Test empty cache with run_install (${{ matrix.run_install.name }}, ${{ matrix.os }})'

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        pnpm:
          - 8
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        run_install:
          - name: 'empty-object'
            value: '{}'
          - name: 'recursive'
            value: |
              recursive: true

    steps:
      - uses: actions/checkout@v4

      - name: Run the action
        uses: ./
        with:
          version: ${{ matrix.pnpm }}
          run_install: ${{ matrix.run_install.value }}
          cache: true
          cache_key_prefix: ${{ runner.os }}-pnpm-store-${{ matrix.run_install.name }}-

      - name: 'Test: which'
        run: which pnpm; which pnpx

      - name: 'Test: install'
        run: pnpm install

  test_run_cached_offline_install:
    name: 'Test offline cache with run_install (${{ matrix.run_install.name }}, ${{ matrix.os }})'

    runs-on: ${{ matrix.os }}

    needs: test_run_cached_install

    strategy:
      fail-fast: false
      matrix:
        pnpm:
          - 8
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        run_install:
          - name: 'empty-object'
            value: |
              { args: [--offline] }
          - name: 'recursive'
            value: |
              recursive: true
              args:
                - --offline

    steps:
      - uses: actions/checkout@v4

      - name: Rerun the action
        uses: ./
        with:
          version: ${{ matrix.pnpm }}
          run_install: ${{ matrix.run_install.value }}
          cache: true
          cache_key_prefix: ${{ runner.os }}-pnpm-store-${{ matrix.run_install.name }}-

  # Based on https://github.com/actions/cache/blob/main/tips-and-workarounds.md#force-deletion-of-caches-overriding-default-cache-eviction-policy
  clear_cache:
    name: 'Wipe cache'
    
    needs: test_run_cached_offline_install
    if: ${{ always() }}

    permissions:
      # `actions:write` permission is required to delete caches
      #   See also: https://docs.github.com/en/rest/actions/cache?apiVersion=2022-11-28#delete-a-github-actions-cache-for-a-repository-using-a-cache-id
      actions: write
      contents: read
    
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Cleanup pnpm store cache
        run: |
          gh extension install actions/gh-actions-cache
          
          REPO=${{ github.repository }}
          BRANCH=${{ github.ref }}

          echo "Fetching list of cache key"
          cacheKeysForPR=$(gh actions-cache list -R $REPO -B $BRANCH | cut -f 1 )

          ## Setting this to not fail the workflow while deleting cache keys. 
          set +e
          echo "Deleting caches..."
          for cacheKey in $cacheKeysForPR
          do
              echo Deleting $cacheKey
              gh actions-cache delete "$cacheKey" -R "$REPO" -B "$BRANCH" --confirm
          done
          echo "Done"
        env:
          GH_TOKEN: ${{ github.token }}